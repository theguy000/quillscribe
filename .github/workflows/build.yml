name: Build QuillScribe

on:
  push:
    branches: [ main, develop, 001-voice-to-text ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

permissions:
  contents: write
  actions: read

env:
  QT_VERSION: '6.6.3'
  CMAKE_VERSION: '3.28.3'

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtmultimedia qtnetworkauth'
        cache: true

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3

    - name: Setup MSVC Environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Verify MSVC Compiler
      run: |
        where cl.exe
        cl.exe
        echo "Compiler verification complete"

    - name: Configure CMake (Windows MSVC)
      run: |
        cmake --preset windows-msvc${{ matrix.config == 'Release' && '-release' || '' }} -DCMAKE_PREFIX_PATH="$env:Qt6_DIR"

    - name: Build
      run: |
        cmake --build build/windows-msvc${{ matrix.config == 'Release' && '-release' || '' }} --config ${{ matrix.config }}

    - name: Deploy Qt Libraries
      if: matrix.config == 'Release'
      run: |
        $QtBinDir = "$env:Qt6_DIR\bin"
        $ExePath = "build\windows-msvc-release\src\Release\quillscribe.exe"
        if (Test-Path $ExePath) {
          & "$QtBinDir\windeployqt.exe" $ExePath --multimedia --network
          Write-Host "Qt libraries deployed successfully"
        } else {
          Write-Host "Executable not found at $ExePath"
          exit 1
        }

    - name: Install NSIS
      if: matrix.config == 'Release'
      run: |
        choco install nsis -y
        Write-Host "NSIS installed successfully"

    - name: Setup Whisper Models (Windows)
      if: matrix.config == 'Release'
      shell: bash
      run: ./scripts/setup-whisper-models.sh

    - name: Create Single Executable
      if: matrix.config == 'Release'
      shell: bash
      run: |
        ./scripts/package-single-exe.sh --platform windows --config Release

    - name: Run Tests
      run: |
        $TestExe = "build\windows-msvc${{ matrix.config == 'Release' && '-release' || '' }}\tests\${{ matrix.config }}\contract_tests.exe"
        if (Test-Path $TestExe) {
          & $TestExe
        } else {
          Write-Host "Tests not found at $TestExe"
        }

    - name: Upload Artifacts (Release)
      if: matrix.config == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: quillscribe-windows-x64
        path: |
          QuillScribe-Portable.exe
          build/windows-msvc-release/src/Release/
          !build/windows-msvc-release/src/Release/*.pdb
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        config: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        modules: 'qtmultimedia qtnetworkauth'
        cache: true

    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Configure CMake (macOS)
      run: |
        cmake --preset macos${{ matrix.config == 'Release' && '-release' || '' }} -DCMAKE_PREFIX_PATH=$Qt6_DIR

    - name: Build
      run: |
        cmake --build build/macos${{ matrix.config == 'Release' && '-release' || '' }} --config ${{ matrix.config }}

    - name: Deploy Qt Frameworks
      if: matrix.config == 'Release'
      run: |
        APP_PATH="build/macos-release/src/Release/quillscribe.app"
        if [ -d "$APP_PATH" ]; then
          $Qt6_DIR/bin/macdeployqt "$APP_PATH"
          echo "Qt frameworks deployed successfully"
        else
          echo "App bundle not found at $APP_PATH"
          exit 1
        fi

    - name: Run Tests
      run: |
        TEST_EXE="build/macos${{ matrix.config == 'Release' && '-release' || '' }}/tests/${{ matrix.config }}/contract_tests"
        if [ -f "$TEST_EXE" ]; then
          "$TEST_EXE"
        else
          echo "Tests not found at $TEST_EXE"
        fi

    - name: Setup Whisper Models (macOS)
      if: matrix.config == 'Release'
      run: |
        chmod +x ./scripts/setup-whisper-models.sh
        ./scripts/setup-whisper-models.sh

    - name: Create DMG (Release)
      if: matrix.config == 'Release'
      run: |
        chmod +x ./scripts/package-single-exe.sh
        ./scripts/package-single-exe.sh --platform macos --config Release

    - name: Upload Artifacts (Release)
      if: matrix.config == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: quillscribe-macos
        path: |
          QuillScribe-macOS.dmg
          build/macos-release/src/Release/quillscribe.app
        retention-days: 30

  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        config: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install System Dependencies
      run: |
        # Install system dependencies for build and Qt XCB platform plugin
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ninja-build \
          libgl1-mesa-dev \
          libpulse-dev \
          libasound2-dev \
          libegl1-mesa-dev \
          libxkbcommon-dev \
          libgtest-dev \
          libxcb-xinerama0 \
          libxcb-cursor0 \
          libxcb1 \
          libx11-xcb1 \
          libxrender1 \
          libxi6 \
          libxkbcommon-x11-0 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxfixes3 \
          libxrandr2 \
          libxext6 \
          xvfb \
          pulseaudio \
          alsa-utils \
          libasound2-plugins \
          imagemagick

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia qtnetworkauth'
        cache: true

    - name: Setup Qt Environment for Testing
      run: |
        # Set up environment for headless Qt testing
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
        echo "QT_LOGGING_RULES=qt.qpa.xcb=false" >> $GITHUB_ENV
        echo "DISPLAY=:99.0" >> $GITHUB_ENV
        
        # Start virtual display
        sudo Xvfb :99 -screen 0 1024x768x24 &
        sleep 3

    - name: Setup Virtual Audio Environment
      run: |
        # Kill any existing PulseAudio processes
        pulseaudio --kill || true
        sleep 1
        
        # Start PulseAudio in user mode with explicit configuration
        pulseaudio --start --exit-idle-time=-1 --log-level=info
        
        # Wait for PulseAudio to be ready and verify it's running
        sleep 5
        for i in {1..10}; do
          if pulseaudio --check; then
            echo "PulseAudio is running (attempt $i)"
            break
          fi
          echo "Waiting for PulseAudio to start (attempt $i)..."
          sleep 2
        done
        
        # Verify PulseAudio is responsive
        pulseaudio --check || (echo "PulseAudio failed to start properly"; exit 1)
        
        # Set the PULSE_SERVER environment variable
        echo "PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native" >> $GITHUB_ENV
        
        # Create virtual null sink and source with error handling
        echo "Creating virtual audio devices..."
        if ! pactl load-module module-null-sink sink_name=dummy_output sink_properties=device.description=DummyOutput; then
          echo "Warning: Failed to create null sink, but continuing..."
        fi
        
        if ! pactl load-module module-null-source source_name=dummy_input source_properties=device.description=DummyInput; then
          echo "Warning: Failed to create null source, but continuing..."
        fi
        
        # Set as default devices (with fallback)
        pactl set-default-sink dummy_output 2>/dev/null || echo "Using system default sink"
        pactl set-default-source dummy_input 2>/dev/null || echo "Using system default source"
        
        # Verify audio setup
        echo "=== Audio Setup Verification ==="
        echo "PulseAudio status:"
        pulseaudio --check && echo "PulseAudio is running" || echo "PulseAudio not running"
        
        echo "Available sinks:"
        pactl list short sinks || echo "No sinks found"
        
        echo "Available sources:"  
        pactl list short sources || echo "No sources found"
        
        echo "Default sink:"
        pactl get-default-sink || echo "No default sink"
        
        echo "Default source:"
        pactl get-default-source || echo "No default source"
        
        # Set environment variables for audio testing  
        echo "AUDIO_TEST_MODE=CI" >> $GITHUB_ENV
        echo "PULSE_RUNTIME_PATH=$XDG_RUNTIME_DIR/pulse" >> $GITHUB_ENV
        
    - name: Verify Qt Installation
      run: |
        echo "Qt6_DIR: $Qt6_DIR"
        echo "QT_PLUGIN_PATH: $QT_PLUGIN_PATH"
        echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        echo "QT_QPA_PLATFORM: $QT_QPA_PLATFORM"
        ls -la $Qt6_DIR/lib/ | head -10
        pkg-config --modversion Qt6Core Qt6Widgets Qt6Multimedia || echo "pkg-config failed"

    - name: Configure CMake (Linux)
      run: |
        echo "Configuring with Qt6_DIR: $Qt6_DIR"
        cmake --preset ${{ matrix.config == 'Release' && 'release' || 'default' }} \
          -DCMAKE_PREFIX_PATH=$Qt6_DIR \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DQt6_DIR=$Qt6_DIR/lib/cmake/Qt6

    - name: Build
      run: |
        echo "Building with configuration: ${{ matrix.config }}"
        cmake --build build/${{ matrix.config == 'Release' && 'release' || 'default' }} --verbose

    - name: Run Tests
      run: |
        TEST_EXE="build/${{ matrix.config == 'Release' && 'release' || 'default' }}/tests/contract_tests"
        if [ -f "$TEST_EXE" ]; then
          echo "Running tests with Qt platform: $QT_QPA_PLATFORM"
          "$TEST_EXE"
        else
          echo "Tests not found at $TEST_EXE"
          echo "Available files in tests directory:"
          ls -la "build/${{ matrix.config == 'Release' && 'release' || 'default' }}/tests/" || echo "Tests directory not found"
        fi

    - name: Remove Mimer SQL plugin to prevent AppImage build error
      if: matrix.config == 'Release'
      run: rm -f $Qt6_DIR/plugins/sqldrivers/libqsqlmimer.so

    - name: Setup Whisper Models (Linux)
      if: matrix.config == 'Release'
      run: |
        chmod +x ./scripts/setup-whisper-models.sh
        ./scripts/setup-whisper-models.sh

    - name: Create AppImage (Release)
      if: matrix.config == 'Release'
      run: |
        chmod +x ./scripts/package-single-exe.sh
        ./scripts/package-single-exe.sh --platform linux --config Release

    - name: Upload Artifacts (Release)
      if: matrix.config == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: quillscribe-linux-x86_64
        path: |
          build/release/src/quillscribe
          QuillScribe-Linux-x86_64.AppImage
        retention-days: 30

  create-release:
    if: github.event_name == 'release'
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-22.04
    
    steps:
    - name: Download Windows Artifacts
      uses: actions/download-artifact@v4
      with:
        name: quillscribe-windows-x64
        path: windows-release/

    - name: Download macOS Artifacts
      uses: actions/download-artifact@v4
      with:
        name: quillscribe-macos
        path: macos-release/

    - name: Download Linux Artifacts
      uses: actions/download-artifact@v4
      with:
        name: quillscribe-linux-x86_64
        path: linux-release/

    - name: Create Release Archives
      run: |
        # Create Windows ZIP
        cd windows-release && zip -r ../quillscribe-windows-x64.zip . && cd ..
        
        # Create Linux tar.gz
        cd linux-release && tar -czf ../quillscribe-linux-x86_64.tar.gz . && cd ..
        
        # macOS DMG is already created

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          quillscribe-windows-x64.zip
          quillscribe-linux-x86_64.tar.gz
          macos-release/quillscribe-macos.dmg
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
